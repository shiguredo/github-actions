name: "Setup CUDA Toolkit"
description: "Setup CUDA Toolkit for Linux and Windows platforms"
inputs:
  cuda_version:
    description: "CUDA version (e.g. 12.9.1)"
    required: true
  platform:
    description: "Platform (ubuntu-22.04, ubuntu-24.04, windows-2022, windows-2025)"
    required: true
  use-cache:
    description: "Whether to use cache for CUDA installation (true/false)"
    required: false
    default: "true"
outputs:
  cuda_path:
    description: "Path to the CUDA installation"
    value: ${{ steps.output-unix.outputs.cuda_path || steps.output-windows.outputs.cuda_path }}
  cache-hit:
    description: "Whether the cache was hit"
    value: ${{ steps.cache-cuda.outputs.cache-hit }}

runs:
  using: "composite"
  steps:
    # アーキテクチャチェック
    - name: Check architecture
      shell: bash
      run: |
        ARCH=$(uname -m)
        if [ "$ARCH" != "x86_64" ]; then
          echo "Error: This action only supports x86_64 architecture"
          echo "Current architecture: $ARCH"
          exit 1
        fi
        echo "Architecture check passed: $ARCH"

    # Linux 用のステップ
    - name: Download CUDA keyring for Ubuntu 24.04
      if: runner.os == 'Linux' && inputs.platform == 'ubuntu-24.04'
      shell: bash
      run: |
        wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2404/x86_64/cuda-keyring_1.1-1_all.deb

    - name: Download CUDA keyring for Ubuntu 22.04
      if: runner.os == 'Linux' && inputs.platform == 'ubuntu-22.04'
      shell: bash
      run: |
        wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb

    - name: Install CUDA for Linux
      if: runner.os == 'Linux'
      shell: bash
      run: |
        CUDA_VERSION="${{ inputs.cuda_version }}"
        # バージョンに -1 が含まれていない場合は自動的に付加
        # (例: 12.8.1 -> 12.8.1-1)
        if [[ ! "$CUDA_VERSION" =~ -[0-9]+$ ]]; then
          CUDA_VERSION="${CUDA_VERSION}-1"
        fi
        # CUDA_VERSION (例: 12.8.1-1) から cuda-toolkit-12=12.8.1-1 のような形式を生成
        # Ubuntu 22.04 と 24.04 のどちらも cuda-toolkit-{major_version} 形式を使用
        CUDA_MAJOR=$(echo $CUDA_VERSION | cut -d. -f1)
        CUDA_PKG="cuda-toolkit-${CUDA_MAJOR}=${CUDA_VERSION}"
        sudo dpkg -i cuda-keyring_*all.deb
        sudo apt-get update
        DEBIAN_FRONTEND=noninteractive sudo apt-get -y install ${CUDA_PKG}
        echo "cuda_path=/usr/local/cuda" >> $GITHUB_OUTPUT
      id: install-linux

    - name: Set output for Linux
      if: runner.os == 'Linux'
      id: output-unix
      shell: bash
      run: |
        echo "cuda_path=/usr/local/cuda" >> $GITHUB_OUTPUT

    # Windows 用のステップ
    - name: Setup Windows paths
      if: runner.os == 'Windows'
      id: setup-windows
      shell: bash
      run: |
        # CUDA_VERSION からメジャー.マイナーバージョンを抽出
        CUDA_VERSION="${{ inputs.cuda_version }}"
        CUDA_MAJOR=$(echo $CUDA_VERSION | cut -d. -f1)
        CUDA_MINOR=$(echo $CUDA_VERSION | cut -d. -f2)
        CUDA_VERSION_SHORT="${CUDA_MAJOR}.${CUDA_MINOR}"
        echo "cuda_version_short=${CUDA_VERSION_SHORT}" >> $GITHUB_OUTPUT

        # キャッシュパスを設定
        PLATFORM=$(echo "${{ inputs.platform }}" | sed 's/ubuntu-/windows_/')
        CACHE_PATH="_install/${PLATFORM}/release/cuda"
        echo "cache_path=${CACHE_PATH}" >> $GITHUB_OUTPUT

    - name: Cache CUDA for Windows
      if: runner.os == 'Windows' && inputs.use-cache == 'true'
      id: cache-cuda
      uses: actions/cache@v4
      with:
        path: ${{ steps.setup-windows.outputs.cache_path }}
        key: windows-cuda-${{ inputs.cuda_version }}.v1

    - name: Create cuda.version file if cache hit
      if: runner.os == 'Windows' && steps.cache-cuda.outputs.cache-hit == 'true'
      shell: pwsh
      run: |
        $CACHE_PATH = "${{ steps.setup-windows.outputs.cache_path }}"
        New-Item -ItemType Directory -Force -Path $CACHE_PATH | Out-Null
        echo "${{ inputs.cuda_version }}" > "${CACHE_PATH}\cuda.version"

    - name: Install CUDA for Windows
      if: runner.os == 'Windows' && steps.cache-cuda.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        $CUDA_VERSION = "${{ inputs.cuda_version }}"
        $CACHE_PATH = "${{ steps.setup-windows.outputs.cache_path }}"

        # cuda_version から -1 などのリビジョン番号を削除 (例: 12.8.1-1 -> 12.8.1)
        $CUDA_VERSION_CLEAN = $CUDA_VERSION -replace '-.*$', ''

        Write-Host "CUDA ${CUDA_VERSION_CLEAN} のセットアップを開始します"
        Write-Host "キャッシュパス: ${CACHE_PATH}"

        # バージョンマッピングファイルを読み込み
        $MAPPING_FILE = "${{ github.action_path }}/cuda-versions-windows.json"
        $versionMap = Get-Content $MAPPING_FILE | ConvertFrom-Json

        # ドライバーバージョンを取得
        $driverVersion = $versionMap.$CUDA_VERSION_CLEAN

        # URL を構築
        if ([string]::IsNullOrEmpty($driverVersion)) {
          # CUDA 13.x 形式 (ドライバーバージョンなし)
          $installerName = "cuda_${CUDA_VERSION_CLEAN}_windows.exe"
        } else {
          # CUDA 12.x 形式 (ドライバーバージョンあり)
          $installerName = "cuda_${CUDA_VERSION_CLEAN}_${driverVersion}_windows.exe"
        }

        $installerUrl = "https://developer.download.nvidia.com/compute/cuda/${CUDA_VERSION_CLEAN}/local_installers/${installerName}"
        $installerPath = Join-Path $env:TEMP $installerName

        Write-Host "ダウンロード URL: ${installerUrl}"
        Write-Host "ダウンロード先: ${installerPath}"

        # CUDA インストーラーをダウンロード
        try {
          Invoke-WebRequest -Uri $installerUrl -OutFile $installerPath
          Write-Host "ダウンロード完了"
        } catch {
          Write-Error "ダウンロードに失敗しました: $_"
          exit 1
        }

        # 展開用の一時ディレクトリを作成
        $extractPath = Join-Path $env:TEMP "cuda_extract"
        New-Item -ItemType Directory -Force -Path $extractPath | Out-Null

        # 7z でインストーラーを展開
        Write-Host "CUDA インストーラーを展開します"
        try {
          & 7z x $installerPath -o"$extractPath" | Out-Null
          Write-Host "展開完了"
        } catch {
          Write-Error "展開中にエラーが発生しました: $_"
          exit 1
        }

        # インストーラーを削除
        Remove-Item $installerPath -Force

        # キャッシュディレクトリを作成
        New-Item -ItemType Directory -Force -Path $CACHE_PATH | Out-Null

        # 必要なコンポーネントをコピー
        Write-Host "必要なコンポーネントをコピーします"
        $components = @(
          @{Name = "cuda_nvcc"; SubDir = "nvcc"},
          @{Name = "cuda_cudart"; SubDir = "cudart"},
          @{Name = "cuda_cublas_dev"; SubDir = "cublas_dev"},
          @{Name = "cuda_curand_dev"; SubDir = "curand_dev"},
          @{Name = "cuda_nvrtc_dev"; SubDir = "nvrtc_dev"},
          @{Name = "cuda_nvml_dev"; SubDir = "nvml_dev"}
        )

        foreach ($component in $components) {
          $componentPath = Join-Path $extractPath $component.Name
          $subDirPath = Join-Path $componentPath $component.SubDir
          if (Test-Path $subDirPath) {
            Write-Host "コピー中: $($component.Name)"
            Copy-Item -Path "$subDirPath\*" -Destination $CACHE_PATH -Recurse -Force
          } else {
            Write-Warning "コンポーネント $($component.Name) が見つかりませんでした: $subDirPath"
          }
        }

        # 展開ディレクトリを削除
        Remove-Item -Path $extractPath -Recurse -Force -ErrorAction SilentlyContinue

        # cuda.version ファイルを作成
        echo $CUDA_VERSION > "${CACHE_PATH}\cuda.version"

        Write-Host "CUDA ${CUDA_VERSION_CLEAN} のセットアップが完了しました"

    - name: Set output for Windows
      if: runner.os == 'Windows'
      id: output-windows
      shell: pwsh
      run: |
        $CUDA_VERSION = "${{ inputs.cuda_version }}"
        # cuda_version から -1 などのリビジョン番号を削除 (例: 12.8.1-1 -> 12.8.1)
        $CUDA_VERSION_CLEAN = $CUDA_VERSION -replace '-.*$', ''

        # CUDA のインストールパス
        $cudaPath = "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v${CUDA_VERSION_CLEAN}"

        # bash 形式のパスに変換
        $cudaPathBash = $cudaPath -replace '\\', '/' -replace 'C:', '/c'

        echo "cuda_path=${cudaPathBash}" >> $env:GITHUB_OUTPUT

        Write-Host "CUDA パス: ${cudaPath}"
