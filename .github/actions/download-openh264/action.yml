name: "Download OpenH264"
description: "Download OpenH264 library for the platform"
inputs:
  platform_name:
    description: "Platform name (e.g. ubuntu-24.04_x86_64, macos_arm64, windows_x86_64)"
    required: true
  openh264_version:
    description: "OpenH264 version (e.g. 2.6.0)"
    required: true
  use-cache:
    description: "Whether to use cache for downloaded library (true/false)"
    required: false
    default: 'false'
outputs:
  openh264_path:
    description: "Path to the downloaded OpenH264 library"
    value: ${{ steps.output-unix.outputs.openh264_path || steps.output-windows.outputs.openh264_path }}
  cache-hit:
    description: "Whether the cache was hit"
    value: ${{ steps.cache.outputs.cache-hit }}

runs:
  using: "composite"
  steps:
    - name: Setup cache directory
      id: setup
      shell: bash
      run: |
        # キャッシュディレクトリを設定
        CACHE_DIR="${HOME}/.openh264-cache/${{ inputs.platform_name }}-${{ inputs.openh264_version }}"
        echo "cache_dir=${CACHE_DIR}" >> $GITHUB_OUTPUT
        
        # ライブラリファイル名を決定
        case "${{ inputs.platform_name }}" in
          ubuntu-*_x86_64|ubuntu-*_armv8)
            LIB_NAME="libopenh264.so"
            ;;
          macos_arm64)
            LIB_NAME="libopenh264.dylib"
            ;;
          windows_x86_64)
            LIB_NAME="libopenh264.dll"
            ;;
          *)
            echo "Unknown platform: ${{ inputs.platform_name }}"
            exit 1
            ;;
        esac
        echo "lib_name=${LIB_NAME}" >> $GITHUB_OUTPUT
        echo "lib_path=${CACHE_DIR}/${LIB_NAME}" >> $GITHUB_OUTPUT

    - name: Cache OpenH264
      if: inputs.use-cache == 'true'
      id: cache
      uses: actions/cache@v4
      with:
        path: ${{ steps.setup.outputs.cache_dir }}
        key: openh264-${{ inputs.platform_name }}-${{ inputs.openh264_version }}

    - name: Download and setup OpenH264 (Linux/macOS)
      if: steps.cache.outputs.cache-hit != 'true' && runner.os != 'Windows'
      id: download-linux-macos
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        VERSION="${{ inputs.openh264_version }}"
        CACHE_DIR="${{ steps.setup.outputs.cache_dir }}"
        LIB_NAME="${{ steps.setup.outputs.lib_name }}"

        # キャッシュディレクトリを作成
        mkdir -p "${CACHE_DIR}"

        # GitHub Release から URL を動的に取得
        echo "Fetching release information for v${VERSION}..."
        # gh api を使って JSON 経由で安全に取得（一度だけ取得して変数に保存）
        RELEASE_BODY=$(gh api repos/cisco/openh264/releases/tags/v${VERSION} --jq '.body' 2>/dev/null || echo "")
        
        if [[ -z "$RELEASE_BODY" ]]; then
          echo "Error: Failed to fetch release information for v${VERSION}"
          exit 1
        fi

        # プラットフォームごとの設定と URL 取得
        case "${{ inputs.platform_name }}" in
          ubuntu-*_x86_64)
            URL=$(echo "$RELEASE_BODY" | grep -E "http.*linux64.*\.so\.bz2" | head -1 | tr -d '\r')
            MD5_URL=$(echo "$RELEASE_BODY" | grep -E "http.*linux64.*\.so\.signed\.md5\.txt" | head -1 | tr -d '\r')
            TARGET="${LIB_NAME}"
            ;;
          ubuntu-*_armv8)
            URL=$(echo "$RELEASE_BODY" | grep -E "http.*linux-arm64.*\.so\.bz2" | head -1 | tr -d '\r')
            MD5_URL=$(echo "$RELEASE_BODY" | grep -E "http.*linux-arm64.*\.so\.signed\.md5\.txt" | head -1 | tr -d '\r')
            TARGET="${LIB_NAME}"
            ;;
          macos_arm64)
            URL=$(echo "$RELEASE_BODY" | grep -E "http.*mac-arm64.*\.dylib\.bz2" | head -1 | tr -d '\r')
            MD5_URL=$(echo "$RELEASE_BODY" | grep -E "http.*mac-arm64.*\.dylib\.signed\.md5\.txt" | head -1 | tr -d '\r')
            TARGET="${LIB_NAME}"
            ;;
          *)
            echo "Unknown platform: ${{ inputs.platform_name }}"
            exit 1
            ;;
        esac

        if [[ -z "$URL" ]]; then
          echo "Error: Could not find URL for platform ${{ inputs.platform_name }} in release"
          exit 1
        fi
        
        echo "Downloading from: ${URL}"
        curl -LO "${URL}"
        
        # ファイル名を URL から取得
        FILENAME=$(basename "${URL}" .bz2)
        
        echo "Extracting ${FILENAME}.bz2"
        bzip2 -d "${FILENAME}.bz2"
        
        # MD5チェック（展開後のファイルに対して）
        if [[ -n "$MD5_URL" ]]; then
          echo "Downloading MD5 checksum..."
          curl -LO "${MD5_URL}"
          MD5_FILE=$(basename "${MD5_URL}")
          
          # MD5コマンドの違いを吸収
          if command -v md5sum >/dev/null 2>&1; then
            # Linux
            EXPECTED_MD5=$(awk '{print $NF}' < "${MD5_FILE}")
            ACTUAL_MD5=$(md5sum "${FILENAME}" | cut -d' ' -f1)
          elif command -v md5 >/dev/null 2>&1; then
            # macOS
            EXPECTED_MD5=$(awk '{print $NF}' < "${MD5_FILE}")
            ACTUAL_MD5=$(md5 -q "${FILENAME}")
          else
            echo "Warning: No MD5 command found, skipping checksum verification"
            EXPECTED_MD5=""
            ACTUAL_MD5=""
          fi
          
          if [[ -n "$EXPECTED_MD5" ]] && [[ "$EXPECTED_MD5" != "$ACTUAL_MD5" ]]; then
            echo "Error: MD5 checksum mismatch!"
            echo "Expected: $EXPECTED_MD5"
            echo "Actual: $ACTUAL_MD5"
            exit 1
          elif [[ -n "$EXPECTED_MD5" ]]; then
            echo "MD5 checksum verified: $ACTUAL_MD5"
          fi
        fi
        
        # キャッシュディレクトリにコピー
        cp "${FILENAME}" "${CACHE_DIR}/${TARGET}"
        echo "Library cached to: ${CACHE_DIR}/${TARGET}"

    - name: Download and setup OpenH264 (Windows)
      if: steps.cache.outputs.cache-hit != 'true' && runner.os == 'Windows'
      id: download-windows
      shell: pwsh
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        $VERSION = "${{ inputs.openh264_version }}"
        # bash からのパスを Windows スタイルに変換
        $CACHE_DIR_BASH = "${{ steps.setup.outputs.cache_dir }}"
        $CACHE_DIR = $CACHE_DIR_BASH -replace '^/c/', 'C:\' -replace '/', '\'
        $LIB_NAME = "${{ steps.setup.outputs.lib_name }}"

        # キャッシュディレクトリを作成
        New-Item -ItemType Directory -Force -Path $CACHE_DIR | Out-Null

        # GitHub Release から URL を動的に取得
        Write-Host "Fetching release information for v$VERSION..."
        try {
          $releaseBody = gh api repos/cisco/openh264/releases/tags/v$VERSION --jq '.body'
        } catch {
          Write-Host "Error: Failed to fetch release information for v$VERSION"
          exit 1
        }

        # Windows用のURLを取得
        $URL = $releaseBody | Select-String -Pattern "http.*win64.*\.dll\.bz2" | Select-Object -First 1
        if ($URL) { $URL = $URL.Line.Trim() }
        $MD5_URL = $releaseBody | Select-String -Pattern "http.*win64.*\.dll\.signed\.md5\.txt" | Select-Object -First 1
        if ($MD5_URL) { $MD5_URL = $MD5_URL.Line.Trim() }

        if (-not $URL) {
          Write-Host "Error: Could not find Windows x64 URL in release"
          exit 1
        }

        Write-Host "Downloading from: $URL"
        $filename = Split-Path $URL -Leaf
        Invoke-WebRequest -Uri $URL -OutFile $filename

        # bz2ファイルを展開
        7z e $filename
        $dllName = $filename -replace '\.bz2$', ''

        # MD5チェック（展開後のファイルに対して）
        if ($MD5_URL) {
          Write-Host "Downloading MD5 checksum..."
          Invoke-WebRequest -Uri $MD5_URL -OutFile "md5.txt"
          $md5Content = Get-Content "md5.txt" -Raw
          # MD5ファイル形式: "md5 *filename" から md5 部分を抽出
          $expectedMd5 = ($md5Content.Trim() -split '\s+')[0].ToLower()
          $actualMd5 = (Get-FileHash -Path $dllName -Algorithm MD5).Hash.ToLower()
          if ($expectedMd5 -ne $actualMd5) {
            Write-Host "Error: MD5 checksum mismatch!"
            Write-Host "Expected: $expectedMd5"
            Write-Host "Actual: $actualMd5"
            exit 1
          }
          Write-Host "MD5 checksum verified: $actualMd5"
        }

        # キャッシュディレクトリにコピー
        $destPath = Join-Path $CACHE_DIR $LIB_NAME
        Copy-Item -Path $dllName -Destination $destPath -Force
        # bash 形式のパスで表示（後続の bash ステップとの互換性のため）
        $destPathBash = "$CACHE_DIR_BASH/$LIB_NAME"
        Write-Host "Library cached to: $destPathBash"

    - name: Copy from cache to working directory
      id: copy
      shell: bash
      run: |
        CACHE_DIR="${{ steps.setup.outputs.cache_dir }}"
        LIB_NAME="${{ steps.setup.outputs.lib_name }}"
        LIB_PATH="${{ steps.setup.outputs.lib_path }}"
        
        # キャッシュからワーキングディレクトリにコピー
        if [[ -f "${LIB_PATH}" ]]; then
          cp "${LIB_PATH}" "./${LIB_NAME}"
          echo "Copied ${LIB_NAME} from cache to working directory"
        else
          echo "Error: Library not found in cache: ${LIB_PATH}"
          exit 1
        fi

    - name: Set output (Ubuntu/macOS)
      if: runner.os != 'Windows'
      id: output-unix
      shell: bash
      run: |
        LIB_NAME="${{ steps.setup.outputs.lib_name }}"
        OPENH264_PATH="$(pwd)/${LIB_NAME}"
        echo "OpenH264 library path: ${OPENH264_PATH}"
        echo "openh264_path=${OPENH264_PATH}" >> $GITHUB_OUTPUT
    
    - name: Set output (Windows)
      if: runner.os == 'Windows'
      id: output-windows
      shell: pwsh
      run: |
        $LIB_NAME = "${{ steps.setup.outputs.lib_name }}"
        $OPENH264_PATH = Join-Path (Get-Location) $LIB_NAME
        Write-Host "OpenH264 library path: $OPENH264_PATH"
        echo "openh264_path=$OPENH264_PATH" >> $env:GITHUB_OUTPUT